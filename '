
module Days.Day08
    ( solve1
    , solve2
    ) where

import Misc
import System.IO.Unsafe

solve1 :: String -> Int
solve1 _ = 0

solve2 :: String -> Int
solve2 _ = 0

parseInput1 :: String -> [String]
parseInput1 = concatMap words . map (drop 2 . dropWhile (/= '|')) . lines

part1 :: [String] -> Int
part1 = length . filter okLength
  where
    okLength x = length x == 2 
              || length x == 3 
              || length x == 4 
              || length x == 7

--------------------------------- PART 2 --------------------------------------

segmentPos :: Char -> [Int]
segmentPos 'a' = [0,2,3,5,6,7,8,9]
segmentPos 'b' = [0,4,5,6,8,9]
segmentPos 'c' = [0,1,2,3,4,7,8,9]
segmentPos 'd' = [2,3,4,5,6,8,9]
segmentPos 'e' = [0,2,6,8]
segmentPos 'f' = [0,1,3,4,5,6,7,8]
segmentPos 'g' = [0,2,3,5,6,8,9]



-------------------------------------------------------------------------------

parseFile :: String -> [([String], [String])]
parseFile = map parseRow . lines

parseRow :: String -> ([String], [String])
parseRow str = (words $ takeWhile (/= '|') str, words $ drop 1 $ dropWhile (/= '|') str)

input :: IO String
input = readFile "input/Day8test.txt"
